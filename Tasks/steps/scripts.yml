# Example from Tekton Documentation: https:‌//tekton.dev/docs/pipelines/tasks/#specifying-a-timeout
steps:
  - name: sleep-then-abort
    image: ubuntu
    script: |
      #!/usr/bin/env bash
      echo "Please rest for 60 seconds!"
      sleep 60
    timeout: 5s


---
# Example from Tekton Documentation: https:‌//tekton.dev/docs/pipelines/tasks/#specifying-onerror-for-a-step
steps:
  - image: docker.io/library/golang:latest
    name: ignore-unit-test-failure
    onError: continue
    script: |
      go test .

---

# Workspaces in a Task
# A Task utilizes a workspace as a designated location for input file reading, output file writing, and file operations within a pipeline. It offers a dedicated area within the container where the task executes, facilitating efficient data management and sharing between tasks in the pipeline.

# To maintain best practices, it is recommended to use a single writable workspace in Tasks. The provided example showcases writing a message to a file, which is mounted to the task using the workspaces field within the task's specification.
#Example from Tekton Documentation:https:‌//tekton.dev/docs/pipelines/tasks/#specifying-workspaces
spec:
  steps:
    - name: write-message
      image: ubuntu
      script: |
        #!/usr/bin/env bash
        set -xe
        echo Hello! > $(workspaces.messages.path)/message
  workspaces:
    - name: messages
      description: Location to save the generated message
      mountPath: /custom/path/relative/to/root


---

# Results
# The Result element captures the output of a task or step in a pipeline run, making it available for use in subsequent pipeline steps. An example of this can be observed when a push is made to a Git repository during the initial step, and the same repository needs to be cloned in the following step. In this case, the result element can be utilized to retrieve the Git commit ID.

# To employ the result element, it must first be declared above the params in the Task spec. Subsequently, it can be called upon in the relevant step whenever required, as shown in the example below.
# Example from Tekton Documentation: https:‌//tekton.dev/docs/pipelines/tasks/#emitting-results
apiVersion: tekton.dev/v1 # or tekton.dev/v1beta1
kind: Task
metadata:
  name: display-timestamp
  annotations:
    description: |
      A task that displays the current time.
spec:
  results:
    - name: unix-timestamp
      description: Current timestamp in Unix format.
    - name: readable-timestamp
      description: Current timestamp in a comprehensible format.
  steps:
    - name: display-unix-timestamp
      image: bash:latest
      script: |
        #!/usr/bin/env bash
        date +%s | tee $(results.unix-timestamp.path)
    - name: display-readable-timestamp
      image: bash:latest
      script: |
        #!/usr/bin/env bash
        date | tee $(results.readable-timestamp.path)