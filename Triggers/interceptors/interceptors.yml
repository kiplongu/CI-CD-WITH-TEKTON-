
# Specifying an Interceptor
# To specify an Interceptor within your EventListener, create an interceptors: field with the following sub-fields:

# name - (optional) a name that uniquely identifies this Interceptor definition
# ref - a reference to a ClusterInterceptor or Interceptor object with the following fields:
# name - the name of the referenced ClusterInterceptor
# kind - (optional) specifies that whether the referenced Kubernetes object is a ClusterInterceptor object or NamespacedInterceptor. Default value is ClusterInterceptor
# apiVersion - (optional) specifies the target API version, for example triggers.tekton.dev/v1alpha1
# params - name/value pairs that specify the parameters you want to pass to the ClusterInterceptor
# params - (optional) name/value pairs that specify the desired parameters for the Interceptor; the name field takes a string, while the value field takes a valid JSON object
# Below is an example standalone Interceptor reference within an EventListener definition:


interceptors:
    - name: "validate GitHub payload and filter on eventType"
      ref:
        name: "github"
      params:
      - name: "secretRef"
        value:
          secretName: github-secret
          secretKey: secretToken
      - name: "eventTypes"
        value: ["pull_request"]
    - name: "CEL filter: only when PRs are opened"
      ref:
        name: "cel"
      params:
      - name: "filter"
        value: "body.action in ['opened', 'reopened']"



---



---




# Webhook Interceptors
# Note: Tekton Triggers ships with only a legacy Webhook Interceptor. If you want to implement it using the standalone model, see Implementing custom Interceptors.

# A Webhook Interceptor allows you to process your event payload by an external Kubernetes object containing custom business logic. The Kubernetes object, exposed via a Kubernetes Service, receives event payload data from your EventListener via HTTP, applies its business logic to it, and returns the processed payload (both headers plus body) via a HTTP 200 response to the EventListener.

# This payload can then continue on to the TriggerBinding specified in the EventListener. If processing is not successful, the Interceptor recognizes that the returned HTTP response code is not 200 and halts further processing of the event payload.



apiVersion: triggers.tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: listener-interceptor
spec:
  serviceAccountName: tekton-triggers-example-sa
  triggers:
    - name: foo-trig
      interceptors:
        - webhook:
            header:
              - name: Foo-Trig-Header1
                value: string-value
              - name: Foo-Trig-Header2
                value:
                  - array-val1
                  - array-val2
            objectRef:
              kind: Service
              name: gh-validate
              apiVersion: v1
              namespace: default
      bindings:
        - ref: pipeline-binding
      template:
        ref: pipeline-template